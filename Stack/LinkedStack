import java.util.NoSuchElementException;
import java.lang.Iterable;
import java.util.*;
 
class LinkedStack <Item> implements Stack <Item>
{
  private Node head; //the first node
  private int size; // number of items
 
  //Nested class to define node
  private class Node
  {
    Item item;
    Node next;
  }
 
  //Zero argument constructor
  public LinkedStack()
  {
    head = null;
    size = 0;
  }
 
  //Check if stack is empty 
  public boolean isEmpty()
  {
    if(this.size == 0)
      return true;
    else
      return false;
  }
  
  public Item peek()
  {
    if(isEmpty())
      throw new NoSuchElementException();
    else
      return head.item;
  }
 
  //Remove item from the beginning of the list.
  public Item pop()
  {
    Item item = head.item;
    head = head.next;
    size--;
    return item;
  }
 
  //Add item to the beginning of the list.
  public void push(Item item)
  {
    Node prevHead = head;
    head = new Node();
    head.item = item;
    head.next = prevHead;
    size++;
  }
 
  //Return number of items present in the stack
  public int size()
  {
    return this.size;
  }
 
  //Iterator for traversing stack items
  public Iterator<Item> iterator()
  {
    return new LinkedStackIterator();
  }
 
  //inner class to implement iterator interface
  private class LinkedStackIterator implements Iterator <Item>
  {
    private int i = size;
    private Node first = head; //the first node
 
    public boolean hasNext()
    {
      return (i > 0);
    }
 
    public Item next()
    {
      Item item = first.item;
      first = first.next;
      i--;
      return item;
    }
 
    
 // -> Iterator<E>
 // returns an instance of the LinkedListIterator.
 public Iterator<Item> iterator() {
  return new LinkedListIterator();

 }
 
 
class LinkedListIterator implements Iterator<Item> {
  Node current = head;

  public Item next() {
   if (hasNext() == false)
    throw new NoSuchElementException();

   Item item = current.data;
   current = current.next;
   return item;
  }
  
  public boolean hasNext() {
   return (current != null);
  }
 }
  }
}
