import java.util.NoSuchElementException;

class LinkedList<E> implements Collection<E> {

 Node head = null;
 int size = 0;

 LinkedList() {
 }

 // E, int -> boolean
 // returns true if this item is successfully added to the linkedlist or to the indicated indexoo
 
 public boolean addFirst(E item, int index){
  Node newNode = new Node(item, head);

  if (this.size == 0 || index == 0) {
   this.head = newNode;
   this.size++;
   return true;
  }
  return false;
 }
 
 public boolean add(E item, int index) {
  Node currentNode = this.head;
  Node prevNode = null;
  
  for (int i = 0; i < index; i++) {
   prevNode = currentNode;
   currentNode = currentNode.next;
   if (currentNode == null) {
    break;
   }
  }

  newNode.next = currentNode;
  prevNode.next = newNode;
  size++;
  return true;
 }

 // int -> boolean
 // returns true if this item is successfully removed from the list
 public boolean remove(int index) {
   if (index > this.size)
     return false;
  if (this.size == 0)
   return false;

  Node currentNode = this.head;
  Node prevNode = null;
  int i;
  
  for (i = 0; i < index; i++) {
   prevNode = currentNode;
   currentNode = currentNode.next;
   if (currentNode == null) {
    break; 
   }
  }
  prevNode.next = currentNode.next;
  currentNode.next = null;
  this.size--;
  return true;
 }

 // -> int
 // returns the size of the list.
 public int size() {
  return this.size;
 }

 // -> Iterator<E>
 // returns an instance of the LinkedListIterator.
 public Iterator<E> iterator() {
  return new LinkedListIterator();

 }
 
 
class LinkedListIterator implements Iterator<E> {
  Node current = head;

  public E next() {
   if (hasNext() == false)
    throw new NoSuchElementException();

   E item = current.data;
   current = current.next;
   return item;
  }
  
  public boolean hasNext() {
   return (current != null);
  }
 }

 class Node {
  E data;
  Node next;

  Node(E data, Node next) {
   this.data = data;
   this.next = next;
  }
 }
}


 
